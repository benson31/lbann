////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2014-2019, Lawrence Livermore National Security, LLC.
// Produced at the Lawrence Livermore National Laboratory.
// Written by the LBANN Research Team (B. Van Essen, et al.) listed in
// the CONTRIBUTORS file. <lbann-dev@llnl.gov>
//
// LLNL-CODE-697807.
// All rights reserved.
//
// This file is part of LBANN: Livermore Big Artificial Neural Network
// Toolkit. For details, see http://software.llnl.gov/LBANN or
// https://github.com/LLNL/LBANN.
//
// Licensed under the Apache License, Version 2.0 (the "Licensee"); you
// may not use this file except in compliance with the License.  You may
// obtain a copy of the License at:
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied. See the License for the specific language governing
// permissions and limitations under the license.
////////////////////////////////////////////////////////////////////////////////

syntax = "proto3";

import "google/protobuf/any.proto";

package lbann_data;

// A message describing a training algorithm.
message TrainingAlgorithm {
  // Human-decided name. Just for output/user reference.
  string name = 1;

  // This is a message containing the parameters needed to construct a
  // solver. The actual message type must be registered with LBANN's
  // factory. The onus is on the user to ensure the parameters
  // provided are consistent with the algorithm they have selected.
  google.protobuf.Any parameters = 2;
}

// Is-a TrainingAlgorithm
message SGD {
  message TerminationCriteria {
    oneof criterion {
      uint64 max_batches = 1;
      uint64 max_epochs = 2;
      double max_seconds = 3;
    }
  }

  TerminationCriteria stopping_criteria = 1;
}// message SGD

// Is-a TrainingAlgorithm
message LTFB {
  message TerminationCriteria {
    uint64 max_tournaments = 1;
  }

  TrainingAlgorithm local_training_algorithm = 1;
  google.protobuf.Any meta_learning_strategy = 2;
  TerminationCriteria stopping_criteria = 3;
}// message LTFB

// The classic LTFB algorithm. Implements MetaLearningStrategy.
message RandomPairwiseExchange {
  enum MetricStrategy {
    LOWER_IS_BETTER = 0;
    HIGHER_IS_BETTER = 1;
  }

  map<string, MetricStrategy> metric_name_strategy_map = 1;
  ExchangeStrategy exchange_strategy = 2;

  // This uses the "oneof" strategy because we don't really want
  // downstreams adding strategies willy nilly.
  message ExchangeStrategy {
    message SendRecvWeights {
      bool exchange_hyperparameters = 1;
    }
    message CheckpointBinary {
      // No extra params
    }
    message CheckpointFile {
      string base_dir = 1;
    }

    repeated string weights_name = 1;
    oneof strategy {
      SendRecvWeights sendrecv_weights = 2;
      CheckpointBinary checkpoint_binary = 3;
      CheckpointFile checkpoint_file = 4;
    }
  }// message ExchangeStrategy
}// message RandomPairwiseExchange
